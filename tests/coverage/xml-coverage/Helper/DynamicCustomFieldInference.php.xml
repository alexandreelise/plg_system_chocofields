<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="DynamicCustomFieldInference.php" path="/Helper">
    <totals>
      <lines total="125" comments="28" code="97" executable="35" executed="34" percent="97.14"/>
      <methods count="1" tested="0" percent="0.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="AE\Library\CustomField\Helper\DynamicCustomFieldInference" start="30" executable="35" executed="34" crap="12">
      <namespace name="AE\Library\CustomField\Helper"/>
      <method name="__invoke" signature="__invoke($key, $value)" start="57" end="124" crap="12" executable="35" executed="34" coverage="97.142857142857"/>
    </class>
    <coverage>
      <line nr="59">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_flatten_string_key_with_numeric_part"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="61">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_flatten_string_key_with_numeric_part"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="63">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_flatten_string_key_with_numeric_part"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="64">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_flatten_string_key_with_numeric_part"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="65">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_flatten_string_key_with_numeric_part"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="67">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="69">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="71">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="72">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="74">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_less_than_255_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="77">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="79">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
      </line>
      <line nr="80">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
      </line>
      <line nr="82">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_255_chars_and_less_than_400_chars"/>
      </line>
      <line nr="84">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="86">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="87">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="89">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_text_value_with_more_than_400_chars"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="92">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="94">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="95">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="97">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_integer_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="99">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="101">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="102">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="104">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicCustomFieldInferenceTest::test__invoke_with_float_value"/>
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="106">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="108">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="109">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="111">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="113">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="115">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="116">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
      <line nr="118">
        <covered by="AE\Library\CustomField\Helper\Tests\DynamicMappingTest::testPrefillRemoteFieldsWithValidDataReturnsNonEmptyArray"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Attempt to "infer" the type of custom field to dynamically create based on cached api</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * @version       0.1.0</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> * @package       DynamicCustomFieldInference</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * @author        Alexandre ELIS&#xC9; &lt;contact@alexandre-elise.fr&gt;</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * @copyright (c) 2009-2021 . Alexandre ELIS&#xC9; . Tous droits r&#xE9;serv&#xE9;s.</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * @license       GPL-2.0-and-later GNU General Public License v2.0 or later</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * @link          https://coderparlerpartager.fr</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AE</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Library</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">CustomField</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Helper</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14"/>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RuntimeException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stdClass</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_bool</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_float</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_string</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT"> * @package     AE\Library\CustomField\Helper</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT"> * @since       version</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="30">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DynamicCustomFieldInference</token>
      </line>
      <line no="31">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">	</token>
        <token name="T_COMMENT">// constants used only in this class</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_TYPE_0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_TYPE_1</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'textarea'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_TYPE_2</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'editor'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_TYPE_3</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'radio'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_TYPE_4</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'list'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">	</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_FILTER_0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'JComponentHelper::filterText'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_FILTER_1</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'integer'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_FILTER_2</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'float'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_FILTER_3</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'boolean'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FIELD_FILTER_4</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'safehtml'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">	</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">	</token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">	 * Try to condensed the whole script in this invoke method</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">	 * NOTE: it's bad for separation of concerns but it was to be in one place</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">	 * easy for beginners to read this code</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">	 *</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">	 * @param $key</token>
      </line>
      <line no="51">
        <token name="T_DOC_COMMENT">	 * @param $value</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">	 *</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">	 * @return $this</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">	 *</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">	 * @since version</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">	 */</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">	</token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__invoke</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">	</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">		</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stdClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">		</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">		</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/\.([0-9]{1,10})$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">		</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_4</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">			</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">		</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">		</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">		</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">			</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">255</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">			</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">				</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">				</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">				</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">				</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">			</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">			</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">			</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">255</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">			</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">				</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">				</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">				</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">				</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">			</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">			</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">			</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">				</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_2</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">				</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_4</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">				</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">				</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">			</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">		</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">		</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">		</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">			</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">			</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">		</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">		</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_float</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">		</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_2</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">			</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">			</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">		</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">		</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_bool</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">		</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_3</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">			</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">			</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">		</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">		</token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">		</token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldType</token>
        <token name="T_WHITESPACE">   </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_TYPE_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">			</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inferredFieldFilter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">FIELD_FILTER_0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">			</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">			</token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">		</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">		</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">		</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">		</token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RuntimeException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'No custom field type could be inferred from given data'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">		</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">	</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="125">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="126"/>
    </source>
  </file>
</phpunit>
